defmodule AdventOfCode2018.Day3Test do
  use ExUnit.Case

  import AdventOfCode2018.Day3

  test "parse_input" do
    assert parse_input("""
           #1 @ 1,3: 4x4
           #2 @ 3,1: 4x4
           #3 @ 5,5: 2x2
           """) == [
             {1, 1, 3, 4, 4},
             {2, 3, 1, 4, 4},
             {3, 5, 5, 2, 2}
           ]
  end

  test "expand_claims" do
    assert expand_claims([
             {1, 1, 3, 4, 4},
             {2, 3, 1, 4, 4},
             {3, 5, 5, 2, 2}
           ]) == %{
             {2, 4} => 1,
             {2, 5} => 1,
             {2, 6} => 1,
             {2, 7} => 1,
             {3, 4} => 1,
             {3, 5} => 1,
             {3, 6} => 1,
             {3, 7} => 1,
             {4, 2} => 1,
             {4, 3} => 1,
             {4, 4} => 2,
             {4, 5} => 2,
             {4, 6} => 1,
             {4, 7} => 1,
             {5, 2} => 1,
             {5, 3} => 1,
             {5, 4} => 2,
             {5, 5} => 2,
             {5, 6} => 1,
             {5, 7} => 1,
             {6, 2} => 1,
             {6, 3} => 1,
             {6, 4} => 1,
             {6, 5} => 1,
             {6, 6} => 1,
             {6, 7} => 1,
             {7, 2} => 1,
             {7, 3} => 1,
             {7, 4} => 1,
             {7, 5} => 1,
             {7, 6} => 1,
             {7, 7} => 1
           }
  end

  test "do_overlapped_square_inches" do
    assert do_overlapped_square_inches([
             {1, 1, 3, 4, 4},
             {2, 3, 1, 4, 4},
             {3, 5, 5, 2, 2}
           ]) == 4
  end

  test "is_claim_intact?" do
    assert is_claim_intact?(
             {1, 1, 3, 4, 4},
             %{
               {2, 4} => 1,
               {2, 5} => 1,
               {2, 6} => 1,
               {2, 7} => 1,
               {3, 4} => 1,
               {3, 5} => 1,
               {3, 6} => 1,
               {3, 7} => 1,
               {4, 2} => 1,
               {4, 3} => 1,
               {4, 4} => 2,
               {4, 5} => 2,
               {4, 6} => 1,
               {4, 7} => 1,
               {5, 2} => 1,
               {5, 3} => 1,
               {5, 4} => 2,
               {5, 5} => 2,
               {5, 6} => 1,
               {5, 7} => 1,
               {6, 2} => 1,
               {6, 3} => 1,
               {6, 4} => 1,
               {6, 5} => 1,
               {6, 6} => 1,
               {6, 7} => 1,
               {7, 2} => 1,
               {7, 3} => 1,
               {7, 4} => 1,
               {7, 5} => 1,
               {7, 6} => 1,
               {7, 7} => 1
             }
           ) == {1, false}

    assert is_claim_intact?(
             {3, 5, 5, 2, 2},
             %{
               {2, 4} => 1,
               {2, 5} => 1,
               {2, 6} => 1,
               {2, 7} => 1,
               {3, 4} => 1,
               {3, 5} => 1,
               {3, 6} => 1,
               {3, 7} => 1,
               {4, 2} => 1,
               {4, 3} => 1,
               {4, 4} => 2,
               {4, 5} => 2,
               {4, 6} => 1,
               {4, 7} => 1,
               {5, 2} => 1,
               {5, 3} => 1,
               {5, 4} => 2,
               {5, 5} => 2,
               {5, 6} => 1,
               {5, 7} => 1,
               {6, 2} => 1,
               {6, 3} => 1,
               {6, 4} => 1,
               {6, 5} => 1,
               {6, 6} => 1,
               {6, 7} => 1,
               {7, 2} => 1,
               {7, 3} => 1,
               {7, 4} => 1,
               {7, 5} => 1,
               {7, 6} => 1,
               {7, 7} => 1
             }
           ) == {3, true}
  end

  test "do_intact_claim" do
    assert do_intact_claim([
        {1, 1, 3, 4, 4},
        {2, 3, 1, 4, 4},
        {3, 5, 5, 2, 2}
      ]) == 3
  end
end
